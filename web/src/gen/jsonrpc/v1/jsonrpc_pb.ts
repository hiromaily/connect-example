// @generated by protoc-gen-es v1.2.0 with parameter "target=ts,import_extension=none"
// @generated from file jsonrpc/v1/jsonrpc.proto (package jsonrpc.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { GreetRequest, GreetResponse } from "../../greet/v1/greet_pb";

/**
 * @generated from message jsonrpc.v1.JSONRPCRequest
 */
export class JSONRPCRequest extends Message<JSONRPCRequest> {
  /**
   * @generated from field: string jsonrpc = 1;
   */
  jsonrpc = "";

  /**
   * @generated from field: string method = 2;
   */
  method = "";

  /**
   * @generated from field: greet.v1.GreetRequest params = 3;
   */
  params?: GreetRequest;

  /**
   * @generated from field: uint64 id = 4;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<JSONRPCRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "jsonrpc.v1.JSONRPCRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "jsonrpc", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "params", kind: "message", T: GreetRequest },
    { no: 4, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JSONRPCRequest {
    return new JSONRPCRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JSONRPCRequest {
    return new JSONRPCRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JSONRPCRequest {
    return new JSONRPCRequest().fromJsonString(jsonString, options);
  }

  static equals(a: JSONRPCRequest | PlainMessage<JSONRPCRequest> | undefined, b: JSONRPCRequest | PlainMessage<JSONRPCRequest> | undefined): boolean {
    return proto3.util.equals(JSONRPCRequest, a, b);
  }
}

/**
 * @generated from message jsonrpc.v1.JSONRPCResponse
 */
export class JSONRPCResponse extends Message<JSONRPCResponse> {
  /**
   * @generated from field: string jsonrpc = 1;
   */
  jsonrpc = "";

  /**
   * @generated from field: greet.v1.GreetResponse params = 2;
   */
  params?: GreetResponse;

  /**
   * @generated from field: uint64 id = 3;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<JSONRPCResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "jsonrpc.v1.JSONRPCResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "jsonrpc", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: GreetResponse },
    { no: 3, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JSONRPCResponse {
    return new JSONRPCResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JSONRPCResponse {
    return new JSONRPCResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JSONRPCResponse {
    return new JSONRPCResponse().fromJsonString(jsonString, options);
  }

  static equals(a: JSONRPCResponse | PlainMessage<JSONRPCResponse> | undefined, b: JSONRPCResponse | PlainMessage<JSONRPCResponse> | undefined): boolean {
    return proto3.util.equals(JSONRPCResponse, a, b);
  }
}

